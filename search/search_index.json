{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"guide/","title":"AmigaGuide Format Reference","text":"<p>This document summarises the AmigaGuide hypertext file format as implemented in our parser. Use it as a working reference when extending parsing, rendering, or Markdown output.</p>"},{"location":"guide/#1-overview","title":"1. Overview","text":"<p>An AmigaGuide file is a plain text hypertext database used on classic AmigaOS (2.1+). It contains:</p> <ul> <li>Global commands before/between nodes.</li> <li>One or more named nodes (<code>@NODE ...</code> / <code>@ENDNODE ...</code>) containing text.</li> <li>Inline commands inside text, delimited by <code>@{ ... }</code>.</li> </ul> <p>The first non-empty line is normally <code>@DATABASE &lt;name&gt;</code>.</p>"},{"location":"guide/#2-node-structure","title":"2. Node Structure","text":"<p>A <code>.guide</code> file contains one or more nodes:</p> <pre><code>@DATABASE MyGuide\n@NODE MAIN \"Welcome\"\nThis is the main node.\n@ENDNODE\n\n@NODE Other\nSee @{ \"Main page\" LINK \"MAIN\" }.\n@ENDNODE\n</code></pre> <ul> <li>Node name: identifier without spaces, tabs, <code>:</code> or <code>/</code>.</li> <li>Node title: quoted string (optional if given in <code>@NODE</code> line).</li> </ul> <p>The first node (<code>MAIN</code> by convention) is shown on open.</p>"},{"location":"guide/#3-global-commands","title":"3. Global Commands","text":"<p>Global commands start at column 0 and appear outside any node:</p> Command Args Purpose <code>@DATABASE</code> name Identify the guide file. <code>@$VER:</code> string Version string (AmigaDOS convention). <code>@(c)</code> string Copyright notice. <code>@AUTHOR</code> name Author metadata. <code>@INDEX</code> node or <code>\"file/node\"</code> Default Index button target. <code>@HELP</code> node or <code>\"file/node\"</code> Default Help button target. <code>@FONT</code> name size Default font. <code>@WORDWRAP</code> Enable word-wrap mode. <code>@SMARTWRAP</code> Enable smart-wrap mode. <code>@TAB</code> n Tab width in spaces. <code>@WIDTH</code> cols Width hint. <code>@HEIGHT</code> rows Height hint. <code>@ONOPEN</code> script Run script on open. <code>@ONCLOSE</code> script Run script on close. <code>@MACRO</code> name expansion Define global macro. <code>@AMIGAGUIDE</code> Insert \u201cAmigaGuide\u00ae\u201d in bold. <code>@REM</code>/<code>@REMARK</code> comment Comment (ignored)."},{"location":"guide/#4-node-commands","title":"4. Node Commands","text":"<p>Node-local commands start at column 0, inside a node:</p> Command Args Purpose <code>@TITLE</code> string Node title. <code>@TOC</code> node Contents button target for this node. <code>@NEXT</code> node Next button target. <code>@PREV</code> node Previous button target. <code>@INDEX</code> node Index target (local override). <code>@HELP</code> node Help target (local override). <code>@FONT</code> name size Font override. <code>@PROPORTIONAL</code> Use proportional font. <code>@WORDWRAP</code> Word-wrap (local). <code>@SMARTWRAP</code> Smart-wrap (local). <code>@TAB</code> n Tab width. <code>@KEYWORDS</code> words Keywords for this node. <code>@ONOPEN</code> script Script on node open. <code>@ONCLOSE</code> script Script on node close. <code>@MACRO</code> name expansion Local macro. <code>@EMBED</code> path Insert file contents here."},{"location":"guide/#5-inline-commands","title":"5. Inline Commands","text":"<p>Inline commands appear anywhere inside text between <code>@{</code> and <code>}</code>. Common categories:</p>"},{"location":"guide/#51-links-actions","title":"5.1 Links &amp; Actions","text":"<pre><code>@{ \"Label\" LINK \"TargetNode\" }\n@{ \"Label\" ALINK \"TargetNode\" }\n@{ \"Label\" GUIDE \"file.guide/Node\" }\n@{ \"Label\" SYSTEM \"command\" }\n@{ \"Label\" RX \"script.rexx\" }\n@{ \"Label\" RXS \"inline-rexx-command\" }\n@{ \"Label\" BEEP }\n@{ \"Label\" CLOSE }\n@{ \"Label\" QUIT }\n</code></pre>"},{"location":"guide/#52-styles","title":"5.2 Styles","text":"<pre><code>@{B} / @{UB}      bold on/off\n@{I} / @{UI}      italic on/off\n@{U} / @{UU}      underline on/off\n@{CODE}           toggle code mode (no wrapping)\n@{PLAIN}          reset styles\n</code></pre>"},{"location":"guide/#53-colours","title":"5.3 Colours","text":"<pre><code>@{FG name}        foreground colour\n@{BG name}        background colour\n@{APEN n}         foreground pen index\n@{BPEN n}         background pen index\n</code></pre>"},{"location":"guide/#54-layout-breaks","title":"5.4 Layout &amp; Breaks","text":"<pre><code>@{JLEFT} / @{JCENTER} / @{JRIGHT}    alignment\n@{LINDENT n}                         left indent\n@{PARI n}                            paragraph indent\n@{PARD}                              reset paragraph formatting\n@{TAB}                               insert tab\n@{SETTABS n1 n2 ...}                 set custom tab stops\n@{CLEARTABS}                         reset tab stops\n@{LINE}                              line break\n@{PAR}                               paragraph break\n</code></pre>"},{"location":"guide/#6-escaping","title":"6. Escaping","text":"<ul> <li><code>\\@</code> \u2192 literal <code>@</code></li> <li><code>\\\\</code> \u2192 literal backslash</li> </ul>"},{"location":"guide/#7-encoding","title":"7. Encoding","text":"<ul> <li>Typically ASCII or ISO-8859-1 (Latin-1).</li> <li>May use other 8-bit Amiga charsets for localisation.</li> <li>No encoding metadata \u2014 detect with <code>chardet</code> or similar.</li> <li>Convert to UTF-8 for processing.</li> </ul>"},{"location":"guide/#8-notes-quirks","title":"8. Notes &amp; Quirks","text":"<ul> <li>Commands are case-insensitive.</li> <li>Multiple commands can be on one line if each starts with <code>@</code>.</li> <li><code>ALINK</code> now behaves like <code>LINK</code> in modern viewers.</li> <li>MultiView (AmigaOS 3.x+) supports linking to non-guide files via datatypes.</li> <li><code>SMARTWRAP</code> mode: single newlines treated as spaces, double newlines = paragraph.</li> <li>Macro expansion is not handled by this parser (stored as-is).</li> </ul>"},{"location":"pydoc/","title":"Pydoc","text":""},{"location":"pydoc/#pymigaguide","title":"pymigaguide","text":""},{"location":"pydoc/#pymigaguidemarkdown","title":"pymigaguide.markdown","text":""},{"location":"pydoc/#pymigaguidemodel","title":"pymigaguide.model","text":""},{"location":"pydoc/#guidemetadata-objects","title":"GuideMetadata Objects","text":"<pre><code>class GuideMetadata(BaseModel)\n</code></pre>"},{"location":"pydoc/#database","title":"database","text":"<p>@DATABASE</p> <p></p>"},{"location":"pydoc/#author","title":"author","text":"<p>@AUTHOR</p> <p></p>"},{"location":"pydoc/#version","title":"version","text":"<p>@$VER: ...</p> <p></p>"},{"location":"pydoc/#copyright","title":"copyright","text":"<p>@(c) ...</p> <p></p>"},{"location":"pydoc/#index_node","title":"index_node","text":"<p>@INDEX  (global)</p> <p></p>"},{"location":"pydoc/#help_node","title":"help_node","text":"<p>@HELP   (global)</p> <p></p>"},{"location":"pydoc/#font_name","title":"font_name","text":"<p>@FONT name size (global)</p> <p></p>"},{"location":"pydoc/#wordwrap","title":"wordwrap","text":"<p>@WORDWRAP</p> <p></p>"},{"location":"pydoc/#smartwrap","title":"smartwrap","text":"<p>@SMARTWRAP</p> <p></p>"},{"location":"pydoc/#tab_width","title":"tab_width","text":"<p>@TAB n</p> <p></p>"},{"location":"pydoc/#width_hint","title":"width_hint","text":"<p>@WIDTH</p> <p></p>"},{"location":"pydoc/#height_hint","title":"height_hint","text":"<p>@HEIGHT</p> <p></p>"},{"location":"pydoc/#onopen_script","title":"onopen_script","text":"<p>@ONOPEN (global)</p> <p></p>"},{"location":"pydoc/#onclose_script","title":"onclose_script","text":"<p>@ONCLOSE (global)</p> <p></p>"},{"location":"pydoc/#macros","title":"macros","text":"<p>@MACRO name expansion (global)</p> <p></p>"},{"location":"pydoc/#nodeattributes-objects","title":"NodeAttributes Objects","text":"<pre><code>class NodeAttributes(BaseModel)\n</code></pre>"},{"location":"pydoc/#title","title":"title","text":"<p>@TITLE or @NODE \"title\"</p> <p></p>"},{"location":"pydoc/#toc","title":"toc","text":"<p>@TOC</p> <p></p>"},{"location":"pydoc/#next","title":"next","text":"<p>@NEXT</p> <p></p>"},{"location":"pydoc/#prev","title":"prev","text":"<p>@PREV</p> <p></p>"},{"location":"pydoc/#index","title":"index","text":"<p>@INDEX (node-local)</p> <p></p>"},{"location":"pydoc/#help","title":"help","text":"<p>@HELP  (node-local)</p> <p></p>"},{"location":"pydoc/#font_name_1","title":"font_name","text":"<p>@FONT (node-local)</p> <p></p>"},{"location":"pydoc/#proportional","title":"proportional","text":"<p>@PROPORTIONAL</p> <p></p>"},{"location":"pydoc/#wordwrap_1","title":"wordwrap","text":"<p>@WORDWRAP</p> <p></p>"},{"location":"pydoc/#smartwrap_1","title":"smartwrap","text":"<p>@SMARTWRAP</p> <p></p>"},{"location":"pydoc/#tab_width_1","title":"tab_width","text":"<p>@TAB</p> <p></p>"},{"location":"pydoc/#onopen_script_1","title":"onopen_script","text":"<p>@ONOPEN (node-local)</p> <p></p>"},{"location":"pydoc/#onclose_script_1","title":"onclose_script","text":"<p>@ONCLOSE (node-local)</p> <p></p>"},{"location":"pydoc/#keywords","title":"keywords","text":"<p>@KEYWORDS</p> <p></p>"},{"location":"pydoc/#macros_1","title":"macros","text":"<p>@MACRO (node-local)</p> <p></p>"},{"location":"pydoc/#embeds","title":"embeds","text":"<p>@EMBED path(s)</p> <p></p>"},{"location":"pydoc/#extras","title":"extras","text":"<p>stash unknowns</p> <p></p>"},{"location":"pydoc/#guidenode-objects","title":"GuideNode Objects","text":"<pre><code>class GuideNode(BaseModel)\n</code></pre>"},{"location":"pydoc/#content","title":"content","text":"<p>Flattened inline stream</p> <p></p>"},{"location":"pydoc/#link-objects","title":"Link Objects","text":"<pre><code>class Link(BaseModel)\n</code></pre>"},{"location":"pydoc/#target_file","title":"target_file","text":"<p>\"file.guide\" or other file (e.g., image)</p> <p></p>"},{"location":"pydoc/#target_node","title":"target_node","text":"<p>\"NODE\" or dummy \"main\" when linking to non-guide</p> <p></p>"},{"location":"pydoc/#line","title":"line","text":"<p>optional line number</p> <p></p>"},{"location":"pydoc/#action-objects","title":"Action Objects","text":"<pre><code>class Action(BaseModel)\n</code></pre>"},{"location":"pydoc/#kind","title":"kind","text":"<p>\"SYSTEM\", \"RX\", \"RXS\", \"BEEP\", \"CLOSE\", \"QUIT\"</p> <p></p>"},{"location":"pydoc/#value","title":"value","text":"<p>command/script, or None for BEEP/CLOSE/QUIT</p> <p></p>"},{"location":"pydoc/#styletoggle-objects","title":"StyleToggle Objects","text":"<pre><code>class StyleToggle(BaseModel)\n</code></pre>"},{"location":"pydoc/#style","title":"style","text":"<p>\"bold\", \"italic\", \"underline\", \"code\"</p> <p></p>"},{"location":"pydoc/#colorchange-objects","title":"ColorChange Objects","text":"<pre><code>class ColorChange(BaseModel)\n</code></pre>"},{"location":"pydoc/#fg","title":"fg","text":"<p>named color, or \"APEN:\" <p></p>"},{"location":"pydoc/#bg","title":"bg","text":"<p>named color, or \"BPEN:\" <p></p>"},{"location":"pydoc/#alignchange-objects","title":"AlignChange Objects","text":"<pre><code>class AlignChange(BaseModel)\n</code></pre>"},{"location":"pydoc/#align","title":"align","text":"<p>\"left\", \"center\", \"right\"</p> <p></p>"},{"location":"pydoc/#indentchange-objects","title":"IndentChange Objects","text":"<pre><code>class IndentChange(BaseModel)\n</code></pre>"},{"location":"pydoc/#lindent","title":"lindent","text":"<p>set left indent (spaces)</p> <p></p>"},{"location":"pydoc/#pari","title":"pari","text":"<p>set paragraph initial indent</p> <p></p>"},{"location":"pydoc/#pard","title":"pard","text":"<p>reset paragraph settings</p> <p></p>"},{"location":"pydoc/#tabschange-objects","title":"TabsChange Objects","text":"<pre><code>class TabsChange(BaseModel)\n</code></pre>"},{"location":"pydoc/#tab","title":"tab","text":"<p>literal tab insertion</p> <p></p>"},{"location":"pydoc/#break-objects","title":"Break Objects","text":"<pre><code>class Break(BaseModel)\n</code></pre>"},{"location":"pydoc/#kind_1","title":"kind","text":"<p>\"line\" or \"paragraph\"</p> <p></p>"},{"location":"pydoc/#unknowninline-objects","title":"UnknownInline Objects","text":"<pre><code>class UnknownInline(BaseModel)\n</code></pre>"},{"location":"pydoc/#raw","title":"raw","text":"<p>raw command text inside @{ ... }</p> <p></p>"},{"location":"pydoc/#pymigaguidecli","title":"pymigaguide.cli","text":""},{"location":"pydoc/#detect_and_decode","title":"detect_and_decode","text":"<pre><code>def detect_and_decode(data: bytes) -&gt; tuple[str, str]\n</code></pre> <p>Detect encoding with chardet and decode to a Python str (UTF-8 internally). Returns (text, detected_encoding).</p> <p></p>"},{"location":"pydoc/#pymigaguidewritermarkdown","title":"pymigaguide.writer.markdown","text":""},{"location":"pydoc/#fence_backticks","title":"fence_backticks","text":"<pre><code>def fence_backticks(s: str) -&gt; str\n</code></pre> <p>Wrap s in a backtick fence that doesn't conflict with backticks inside s. Uses inline-style by default (not code blocks).</p> <p></p>"},{"location":"pydoc/#markdownoptions-objects","title":"MarkdownOptions Objects","text":"<pre><code>@dataclass\nclass MarkdownOptions()\n</code></pre>"},{"location":"pydoc/#heading_level","title":"heading_level","text":"<p>heading per node</p> <p></p>"},{"location":"pydoc/#file_suffix","title":"file_suffix","text":"<p>links to other guides</p> <p></p>"},{"location":"pydoc/#tab_spaces","title":"tab_spaces","text":"<p>how many spaces for @{TAB}</p> <p></p>"},{"location":"pydoc/#paragraph_blank_lines","title":"paragraph_blank_lines","text":"<p>blank lines for PAR</p> <p></p>"},{"location":"pydoc/#line_break","title":"line_break","text":"<p>soft line break (we just use newline)</p> <p></p>"},{"location":"pydoc/#underline_html","title":"underline_html","text":"<p>use  for underline <p></p>"},{"location":"pydoc/#include_node_title","title":"include_node_title","text":"<p>emit H1/H2... title at top of node</p> <p></p>"},{"location":"pydoc/#markdownrenderer-objects","title":"MarkdownRenderer Objects","text":"<pre><code>class MarkdownRenderer()\n</code></pre>"},{"location":"pydoc/#render_document","title":"render_document","text":"<pre><code>def render_document(doc: GuideDocument) -&gt; Dict[str, str]\n</code></pre> <p>Returns a dict: { node_name: markdown }</p> <p></p>"},{"location":"pydoc/#pymigaguidewriterhtml","title":"pymigaguide.writer.html","text":""},{"location":"pydoc/#htmlrenderer-objects","title":"HtmlRenderer Objects","text":"<pre><code>class HtmlRenderer()\n</code></pre>"},{"location":"pydoc/#render_document_1","title":"render_document","text":"<pre><code>def render_document(doc: GuideDocument) -&gt; Dict[str, str]\n</code></pre> <p>Returns a dict: { node_name: html }</p> <p></p>"},{"location":"pydoc/#pymigaguidewriterjson","title":"pymigaguide.writer.json","text":""},{"location":"pydoc/#dump_json","title":"dump_json","text":"<pre><code>def dump_json(doc: GuideDocument) -&gt; str\n</code></pre> <p>Pydantic v2 uses model_dump_json; v1 uses .json(). Support both without caring which is installed.</p> <p></p>"},{"location":"pydoc/#pymigaguidewritertxt","title":"pymigaguide.writer.txt","text":""},{"location":"pydoc/#txtrenderer-objects","title":"TxtRenderer Objects","text":"<pre><code>class TxtRenderer()\n</code></pre>"},{"location":"pydoc/#render_document_2","title":"render_document","text":"<pre><code>def render_document(doc: GuideDocument) -&gt; Dict[str, str]\n</code></pre> <p>Returns a dict: { node_name: text }</p> <p></p>"},{"location":"pydoc/#pymigaguideparser","title":"pymigaguide.parser","text":""},{"location":"pydoc/#amigaguideparser-objects","title":"AmigaGuideParser Objects","text":"<pre><code>class AmigaGuideParser()\n</code></pre> <p>Pragmatic AmigaGuide parser:   - Parses global directives, nodes, and inline @{...} commands.   - Preserves unknown inline commands as UnknownInline.   - Does not execute macros; it records global/node macro definitions.</p> <p></p>"},{"location":"pydoc/#pymigaguideregex","title":"pymigaguide.regex","text":""},{"location":"pydoc/#escaped_at_re","title":"ESCAPED_AT_RE","text":"<p>\\@ =&gt; literal @</p> <p></p>"},{"location":"pydoc/#escaped_bs_re","title":"ESCAPED_BS_RE","text":"<p>\\ =&gt; literal \\</p> <p></p>"},{"location":"pydoc/#pymigaguideapp","title":"pymigaguide.app","text":""},{"location":"pydoc/#pymigaguidewidgetsflowtext","title":"pymigaguide.widgets.flowtext","text":""},{"location":"pydoc/#flowoptions-objects","title":"FlowOptions Objects","text":"<pre><code>@dataclass\nclass FlowOptions()\n</code></pre>"},{"location":"pydoc/#word_wrap","title":"word_wrap","text":"<p>AmigaGuide WORDWRAP (soft wrap at width)</p> <p></p>"},{"location":"pydoc/#smart_wrap","title":"smart_wrap","text":"<p>SMARTWRAP (single \\n treated as space)</p> <p></p>"},{"location":"pydoc/#default_tab","title":"default_tab","text":"<p>@TAB n default</p> <p></p>"},{"location":"pydoc/#underline_html_1","title":"underline_html","text":"<p>honor underline (as underline style)</p> <p></p>"},{"location":"pydoc/#show_unknown_inline","title":"show_unknown_inline","text":"<p>render unknowns visibly (debug)</p> <p></p>"},{"location":"pydoc/#linkactivated-objects","title":"LinkActivated Objects","text":"<pre><code>class LinkActivated(Message)\n</code></pre> <p>Posted by FlowText when a link is clicked.</p> <p></p>"},{"location":"pydoc/#flowtext-objects","title":"FlowText Objects","text":"<pre><code>class FlowText(Widget)\n</code></pre> <p>Render AmigaGuide Inline items faithfully enough for TUI: - Styles: bold/italic/underline - Colors: FG/BG by name; APEN/BPEN best-effort - Breaks: LINE, PAR - Tabs: @{TAB} with default/custom tab stops - Links: clickable labels (emit LinkActivated) - Actions: rendered as plain labels (no execution)</p> <p>Notes:</p> <ul> <li>Alignment (JLEFT/JCENTER/JRIGHT) is applied per paragraph.</li> <li>CODE mode as a strict \"no wrap\" inline is not supported per-run in Rich;   we treat it as a style toggle (monospace effect is up to your theme) and</li> <li> <p><code>TODO</code> - we can segment paragraphs to no-wrap blocks later.</p> </li> <li> <p>SMARTWRAP: single newlines turn into spaces unless an explicit @{LINE}   or paragraph boundary is encountered.</p> </li> </ul> <p></p>"},{"location":"pydoc/#pymigaguidewidgetsguidetoolbar","title":"pymigaguide.widgets.guidetoolbar","text":""},{"location":"pydoc/#guidetoolbar-objects","title":"GuideToolbar Objects","text":"<pre><code>class GuideToolbar(Horizontal)\n</code></pre> <p>Top navigation bar for AmigaGuide docs.</p> <p></p>"},{"location":"pydoc/#navrequested-objects","title":"NavRequested Objects","text":"<pre><code>class NavRequested(Message)\n</code></pre> <p>Emitted when a toolbar button requests navigation.</p> <p></p>"},{"location":"pydoc/#pymigaguidewidgets","title":"pymigaguide.widgets","text":""},{"location":"pydoc/#pymigaguidewidgetsguideview","title":"pymigaguide.widgets.guideview","text":""},{"location":"pydoc/#guideview-objects","title":"GuideView Objects","text":"<pre><code>class GuideView(Container)\n</code></pre> <p>High-level viewer: holds a Markdown widget, manages navigation/history, and resolves links between nodes (and across files later).</p> <p></p>"},{"location":"pydoc/#goto","title":"goto","text":"<pre><code>def goto(file: Optional[str], node: Optional[str],\n         line: Optional[int]) -&gt; None\n</code></pre> <p>Navigate to (file,node). If file is None or .guide is current, use current doc. node may be a slug; map to actual node name if possible.</p> <p></p>"},{"location":"pydoc/#on_guide_toolbar_nav_requested","title":"on_guide_toolbar_nav_requested","text":"<pre><code>def on_guide_toolbar_nav_requested(message: GuideToolbar.NavRequested) -&gt; None\n</code></pre> <p>Handle navigation requests from the toolbar.</p> <p></p>"},{"location":"pydoc/#on_markdown_link_clicked","title":"on_markdown_link_clicked","text":"<pre><code>def on_markdown_link_clicked(event: Markdown.LinkClicked) -&gt; None\n</code></pre> <p>Intercept Markdown links and navigate within guides.</p>"}]}